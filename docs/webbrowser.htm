<!-- Article Starts -->

<!-- Download Links -->
<ul class=download>
<li><a href='webbrowser/webbrowser_src.zip'>Download source files - 26.0 Kb</a></li>
</ul>

<h1>Using the WebBrowser control in .NET</h1>

<p>This article describes creating a web browser completely in
C#. The application hosts a Microsoft WebBrowser Control and uses the
functions it provides for all control. Here is a screenshot:<br />
<img width=481 height=439 src="webbrowser/screencap.jpg" /></p>

<p>A lot of the functions do not work yet; most require some
non-.NET programming to work. I stuck to pure .NET programming for this app,
because it is meant to demonstrate features of the .NET Framework and not some
APIs.</p>

<h2>Building the Web Browser</h2>

<p>Before you begin, you must generate some assemblies from the
WebBrowser typlibs, so that they can be used in our code. Typlibs must be
imported for:</p>

<ul>
 <li>The WebBrowser control itself, which is in SHDocVw.dll.</li>
 <li>mshtml.tlb, if you plan to access the DHTML Object Model of the document.</li>
</ul>

<p>This step is easy. At a command prompt, in a folder you
create for this project, type:</p>

<pre>
aximp c:\windows\system\shdocvw.dll
tlbimp mshtml.tlb
</pre>

<p>The aximp command should generate two files: AxSHDocVw.dll
and SHDocVw.dll. The tlbimp command should generate MSHTML.dll, which contains
definitions for the DHTML DOM interfaces, along with about 3000 other types,
so it might take a while to import.</p>

<p>Now you can proceed in several ways: You can do all coding
by hand, or you can use Visual Studio.NET. I have done it the 'SDK way'. Basically,
you have to create a form with:</p>

<ul>
 <li>The WebBrowser control itself.</li>
 <li>A toolbar. Note that not all buttons on the toolbar work as you
     might expect them to.</li>
 <li>A status bar. You can add panels for the status message, a progress bar,
     offline and secure icons, and a zone indicator. I've added these controls
     as placeholders only, they don't work (yet).</li>
 <li>An address bar. This should be a panel with a label, a combo box, and a Go
     button.</li>
 <li>A main menu for the application.</li>
 <li>An image list for the toolbar.</li>
</ul>

<p>Most of the initialisation code shall be added for you and
little work needs to be done here. You must remember to add event handlers for
the WebBrowser control, the status bar, the menus, the toolbar, the address
combo box, and the Go button. All this code is present in the file
WebBrowser.cs. In addition, extra dialogs are included in About.cs,
ImportExport.cs, and Open.cs.</p>

<p>In the WebBrowser.cs file, you must put in the following
statements in the namespace:</p>

<pre>
namespace ND.WebBrowser
{
  
  using System;
  using System.Drawing;
  using System.ComponentModel;
  using System.Windows.Forms;
  using Microsoft.Win32;
  using AxSHDocVw;
  using MSHTML;
  
  // etc..
</pre>

<p>Microsoft.Win32 is required because the application loads the URL MRU
list from the registry. you can remove the MSHTML reference if you
do not need it.</p>

<p>Notice SHDocVw is not included; this causes conflicts with
the definitions in AxSHDocVw.dll. Most of the code is simple and calls
functions of the WB control. </p>

<h2>Menus and Toolbars</h2>

<p>The menu and the toolbar are standard Windows Forms stuff. Menu
popup events are handled to update the enabled/disabled and checked state of
menu items. For example:</p>

<pre>
protected void mnuFile_Popup(object sender, EventArgs e)
    {
      MenuItem miFile = MenuMain.MenuItems[0];
      miFile.MenuItems[14].Checked = AxWebBrowser.Offline;
      
      Int32 EnabledTest = Convert.ToInt32(SHDocVw.OLECMDF.OLECMDF_SUPPORTED)
          + Convert.ToInt32(SHDocVw.OLECMDF.OLECMDF_ENABLED);
      
      miFile.MenuItems[2].Enabled = EnabledTest.Equals(AxWebBrowser.QueryStatusWB //Refresh test for Edit
        (SHDocVw.OLECMDID.OLECMDID_REFRESH));
      miFile.MenuItems[3].Enabled = EnabledTest.Equals(AxWebBrowser.QueryStatusWB
        (SHDocVw.OLECMDID.OLECMDID_SAVE));
      miFile.MenuItems[4].Enabled = EnabledTest.Equals(AxWebBrowser.QueryStatusWB
        (SHDocVw.OLECMDID.OLECMDID_SAVEAS));
      miFile.MenuItems[6].Enabled = EnabledTest.Equals(AxWebBrowser.QueryStatusWB
        (SHDocVw.OLECMDID.OLECMDID_PAGESETUP));
      miFile.MenuItems[7].Enabled = EnabledTest.Equals(AxWebBrowser.QueryStatusWB
        (SHDocVw.OLECMDID.OLECMDID_PRINT));
      miFile.MenuItems[8].Enabled = EnabledTest.Equals(AxWebBrowser.QueryStatusWB
        (SHDocVw.OLECMDID.OLECMDID_PRINTPREVIEW));
      miFile.MenuItems[13].Enabled = EnabledTest.Equals(AxWebBrowser.QueryStatusWB
        (SHDocVw.OLECMDID.OLECMDID_PROPERTIES));
    }
</pre>

<p>First, the File menu object is obtained. Then the WB control
is used to check the enabled status of commands in the menu. If you are
familiar with COM programming, this should be standard code. Otherwise, read
the WebBrowser control documentation at <a
href="http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/webbrowser/reference/Objects/WebBrowser.asp">MSDN: WebBrowser</a>.
Most commands are also executed in the standard COM IOleCommandTarget way, like
this:</p>

<pre>
    protected void mnuFileSave_Click(object sender, EventArgs e)
    {
      Object o = null;
      m_axWebBrowser.ExecWB(SHDocVw.OLECMDID.OLECMDID_SAVE,
        SHDocVw.OLECMDEXECOPT.OLECMDEXECOPT_DODEFAULT,
        ref o, ref o);
    }
</pre>

<p>A null object reference is passed for the input and output
arguments of the ExecWB method. Simply because we have no arguments to pass.
Some menu commands use methods of the WebBrowser control itself, like Home and Search.
The other source files have other dialogs, like the Import & Export dialog.</p>

<pre>
protected void mnuFileOpen_Click(object sender, EventArgs e)
    {
      OpenForm frmOpen = new OpenForm();
      frmOpen.ShowDialog(this);
      if(frmOpen.DialogResult == DialogResult.OK)
      {
        Object o = null;
        AxWebBrowser.Navigate(frmOpen.Address, ref o, ref o, ref o, ref o);
      }
    }
</pre>

<p>The Import and Export dialog uses the ShellUIHelper object,
documented at <a
href="http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/external/overview/overview.asp">MSDN: Shell Helper API</a>.
</p>

<h2>Editing the Document</h2>

<p>Instead of calling an external editor, all editing is done
by the WebBrowser control itself, using an IE 4 feature which allows documents to
make themselves editable. However, our code only invokes the edit mode, and
does nothing beyond that.</p>

<pre>
protected void mnuFileEdit_Click(object sender, EventArgs e)
    {
      IHTMLDocument2 doc;
      object boxDoc = AxWebBrowser.Document;
      doc = (IHTMLDocument2)boxDoc;
      doc.designMode = "On";
    }
</pre>

<p>The code first gets a reference to the Document object and then unboxes it to get
to the IHTMLDocument2 interface. This is necessary because the WebBrowser control
returns the document as an object and not an IHTMLDocument2 pointer.</p>

<h2>The Finished Code</h2>

<p>That just about sums up most of the code. However, a lot of
things do not work yet. Here is a short list:</p>

<ol>
 <li>'Full Screen' and 'View Source' in the application menus.</li>
 <li>Enumeration of the user's Favourites and History.</li>
 <li>'Send' submenu of 'File' menu.</li>
 <li>Mail button on toolbar.</li>
 <li>Edit works to only to a limited extent.</li>
 <li>Tools Menu.</li>
 <li>Back and Forward drop-downs.</li>
 <li>Some pages, especially those with frames, do not load properly. ( ? )</li>
 <li>There is no handling for new windows.</li>
 <li>Status bar icons (secure, offline, zone) are not displayed.</li>
</ol>

<p>Most code should be easy to create, and can be done within
the .NET Framework. However, some functions, like those for favourites and
history, shall involve PInvoke.</p>

<!-- Article Ends -->